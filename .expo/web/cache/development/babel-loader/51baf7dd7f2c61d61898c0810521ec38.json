{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/iShrusti/Documents/GitHub/Pharmacy_App/node_modules/react-native-checkbox-form/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Icon from \"@expo/vector-icons/Ionicons\";\nvar WINDOW_WIDTH = Dimensions.get('window').width;\n\nvar CheckboxForm = function (_Component) {\n  _inherits(CheckboxForm, _Component);\n\n  var _super = _createSuper(CheckboxForm);\n\n  function CheckboxForm(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxForm);\n\n    _this = _super.call(this, props);\n    _this.renderCheckItem = _this.renderCheckItem.bind(_assertThisInitialized(_this));\n    _this._onPress = _this._onPress.bind(_assertThisInitialized(_this));\n    _this.state = {\n      dataSource: props.dataSource\n    };\n    return _this;\n  }\n\n  _createClass(CheckboxForm, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        dataSource: nextProps.dataSource\n      });\n    }\n  }, {\n    key: \"_onPress\",\n    value: function _onPress(item, i) {\n      var outputArr = this.state.dataSource.slice(0);\n      outputArr[i] = item;\n      this.setState({\n        dataSource: outputArr\n      });\n\n      if (this.props.onChecked) {\n        this.props.onChecked(outputArr);\n      }\n    }\n  }, {\n    key: \"renderCheckItem\",\n    value: function renderCheckItem(item, i) {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          itemShowKey = _this$props.itemShowKey,\n          itemCheckedKey = _this$props.itemCheckedKey,\n          iconSize = _this$props.iconSize,\n          iconColor = _this$props.iconColor,\n          textStyle = _this$props.textStyle;\n      var isChecked = item[itemCheckedKey] || false;\n      return React.createElement(TouchableWithoutFeedback, {\n        key: i,\n        onPress: function onPress() {\n          item[itemCheckedKey] = !isChecked;\n\n          _this2._onPress(item, i);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: this.props.labelHorizontal ? 'row' : 'column',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, React.createElement(Icon, {\n        name: isChecked ? 'md-checkbox' : 'ios-square-outline',\n        size: iconSize,\n        color: iconColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }), React.createElement(View, {\n        style: {\n          marginLeft: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: _objectSpread({}, textStyle),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, '' + item[itemShowKey]))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(ScrollView, _extends({}, this.props, {\n        horizontal: this.props.formHorizontal,\n        style: [{\n          width: WINDOW_WIDTH\n        }, this.props.style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }\n      }), this.state.dataSource.map(function (item, i) {\n        return _this3.renderCheckItem(item, i);\n      }));\n    }\n  }]);\n\n  return CheckboxForm;\n}(Component);\n\nCheckboxForm.propTypes = {\n  dataSource: PropTypes.array,\n  formHorizontal: PropTypes.bool,\n  labelHorizontal: PropTypes.bool,\n  itemShowKey: PropTypes.string,\n  itemCheckedKey: PropTypes.string,\n  iconSize: PropTypes.number,\n  iconColor: PropTypes.string,\n  onChecked: PropTypes.func\n};\nCheckboxForm.defaultProps = {\n  dataSource: [],\n  formHorizontal: false,\n  labelHorizontal: true,\n  itemShowKey: 'label',\n  itemCheckedKey: 'checked',\n  iconSize: 20,\n  iconColor: '#2f86d5'\n};\nexport default CheckboxForm;","map":{"version":3,"sources":["/Users/iShrusti/Documents/GitHub/Pharmacy_App/node_modules/react-native-checkbox-form/index.js"],"names":["React","Component","PropTypes","Icon","WINDOW_WIDTH","Dimensions","get","width","CheckboxForm","props","renderCheckItem","bind","_onPress","state","dataSource","nextProps","setState","item","i","outputArr","slice","onChecked","itemShowKey","itemCheckedKey","iconSize","iconColor","textStyle","isChecked","flexDirection","labelHorizontal","justifyContent","alignItems","marginLeft","formHorizontal","style","map","propTypes","array","bool","string","number","func","defaultProps"],"mappings":"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","sourcesContent":["/**\n * react-native-checkbox-form\n * Checkbox component for react native, it works on iOS and Android\n * https://github.com/cuiyueshuai/react-native-checkbox-form.git\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  ScrollView,\n  Text,\n  Dimensions,\n  TouchableWithoutFeedback\n} from 'react-native';\n\nimport Icon from 'react-native-vector-icons/Ionicons';\n\nconst WINDOW_WIDTH = Dimensions.get('window').width;\n\nclass CheckboxForm extends Component {\n  constructor(props) {\n    super(props);\n    this.renderCheckItem = this.renderCheckItem.bind(this);\n    this._onPress = this._onPress.bind(this);\n    this.state = {\n      dataSource: props.dataSource\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      dataSource: nextProps.dataSource\n    });\n  }\n\n  static propTypes = {\n    dataSource: PropTypes.array,\n    formHorizontal: PropTypes.bool,\n    labelHorizontal: PropTypes.bool,\n    itemShowKey: PropTypes.string,\n    itemCheckedKey: PropTypes.string,\n    iconSize: PropTypes.number,\n    iconColor: PropTypes.string,\n    onChecked: PropTypes.func,\n  };\n\n  static defaultProps = {\n    dataSource: [],\n    formHorizontal: false,\n    labelHorizontal: true,\n    itemShowKey: 'label',\n    itemCheckedKey: 'checked',\n    iconSize: 20,\n    iconColor: '#2f86d5',\n  };\n\n  _onPress(item, i) {\n    const outputArr = this.state.dataSource.slice(0);\n    outputArr[i] = item;\n    this.setState({ dataSource: outputArr });\n\n    if (this.props.onChecked) {\n      this.props.onChecked(outputArr);\n    }\n  }\n\n  renderCheckItem(item, i) {\n    const { itemShowKey, itemCheckedKey, iconSize, iconColor, textStyle } = this.props;\n    const isChecked = item[itemCheckedKey] || false;\n\n    return (\n      <TouchableWithoutFeedback\n        key={i}\n        onPress={() => {\n          item[itemCheckedKey] = !isChecked;\n          this._onPress(item, i);\n        }}\n      >\n        <View\n          style={{ flexDirection: this.props.labelHorizontal ? 'row' : 'column',\n            justifyContent: 'center', alignItems: 'center' }}\n        >\n          <Icon\n            name={isChecked ? 'md-checkbox' : 'ios-square-outline'}\n            size={iconSize}\n            color={iconColor}\n          />\n          <View\n            style={{ marginLeft: 5 }}\n          >\n            <Text style={{...textStyle}}>{'' + item[itemShowKey]}</Text>\n          </View>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n\n  render() {\n    return (\n      <ScrollView\n        {...this.props}\n        horizontal={ this.props.formHorizontal}\n        style={[{ width: WINDOW_WIDTH }, this.props.style]}\n      >\n        {\n          this.state.dataSource.map((item, i) => this.renderCheckItem(item, i))\n        }\n      </ScrollView>\n    );\n  }\n\n}\n\nexport default CheckboxForm;\n"]},"metadata":{},"sourceType":"module"}