{"ast":null,"code":"import { Bezier } from \"./Bezier\";\n\nfunction linear(t) {\n  'worklet';\n\n  return t;\n}\n\nfunction ease(t) {\n  'worklet';\n\n  return Bezier(0.42, 0, 1, 1)(t);\n}\n\nfunction quad(t) {\n  'worklet';\n\n  return t * t;\n}\n\nfunction cubic(t) {\n  'worklet';\n\n  return t * t * t;\n}\n\nfunction poly(n) {\n  'worklet';\n\n  return function (t) {\n    return Math.pow(t, n);\n  };\n}\n\nfunction sin(t) {\n  'worklet';\n\n  return 1 - Math.cos(t * Math.PI / 2);\n}\n\nfunction circle(t) {\n  'worklet';\n\n  return 1 - Math.sqrt(1 - t * t);\n}\n\nfunction exp(t) {\n  'worklet';\n\n  return Math.pow(2, 10 * (t - 1));\n}\n\nfunction elastic() {\n  'worklet';\n\n  var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var p = bounciness * Math.PI;\n  return function (t) {\n    'worklet';\n\n    return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n  };\n}\n\nfunction back() {\n  'worklet';\n\n  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;\n  return function (t) {\n    return t * t * ((s + 1) * t - s);\n  };\n}\n\nfunction bounce(t) {\n  'worklet';\n\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  }\n\n  if (t < 2 / 2.75) {\n    var _t = t - 1.5 / 2.75;\n\n    return 7.5625 * _t * _t + 0.75;\n  }\n\n  if (t < 2.5 / 2.75) {\n    var _t2 = t - 2.25 / 2.75;\n\n    return 7.5625 * _t2 * _t2 + 0.9375;\n  }\n\n  var t2 = t - 2.625 / 2.75;\n  return 7.5625 * t2 * t2 + 0.984375;\n}\n\nfunction bezier(x1, y1, x2, y2) {\n  'worklet';\n\n  return Bezier(x1, y1, x2, y2);\n}\n\nfunction in_(easing) {\n  'worklet';\n\n  return easing;\n}\n\nfunction out(easing) {\n  'worklet';\n\n  return function (t) {\n    'worklet';\n\n    return 1 - easing(1 - t);\n  };\n}\n\nfunction inOut(easing) {\n  'worklet';\n\n  return function (t) {\n    'worklet';\n\n    if (t < 0.5) {\n      return easing(t * 2) / 2;\n    }\n\n    return 1 - easing((1 - t) * 2) / 2;\n  };\n}\n\nexport var Easing = {\n  linear: linear,\n  ease: ease,\n  quad: quad,\n  cubic: cubic,\n  poly: poly,\n  sin: sin,\n  circle: circle,\n  exp: exp,\n  elastic: elastic,\n  back: back,\n  bounce: bounce,\n  bezier: bezier,\n  in: in_,\n  out: out,\n  inOut: inOut\n};","map":{"version":3,"sources":["/Users/iShrusti/Documents/GitHub/Pharmacy_App/node_modules/react-native-reanimated/src/reanimated2/Easing.js"],"names":["Bezier","linear","t","ease","quad","cubic","poly","n","Math","pow","sin","cos","PI","circle","sqrt","exp","elastic","bounciness","p","back","s","bounce","t2","bezier","x1","y1","x2","y2","in_","easing","out","inOut","Easing","in"],"mappings":"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","sourcesContent":["import { Bezier } from './Bezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\n\n/**\n * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n * one.\n *\n * http://cubic-bezier.com/#0,0,1,1\n */\nfunction linear(t) {\n  'worklet';\n  return t;\n}\n\n/**\n * A simple inertial interaction, similar to an object slowly accelerating to\n * speed.\n *\n * http://cubic-bezier.com/#.42,0,1,1\n */\nfunction ease(t) {\n  'worklet';\n  return Bezier(0.42, 0, 1, 1)(t);\n}\n\n/**\n * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n * time.\n *\n * http://easings.net/#easeInQuad\n */\nfunction quad(t) {\n  'worklet';\n  return t * t;\n}\n\n/**\n * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n * time.\n *\n * http://easings.net/#easeInCubic\n */\nfunction cubic(t) {\n  'worklet';\n  return t * t * t;\n}\n\n/**\n * A power function. Position is equal to the Nth power of elapsed time.\n *\n * n = 4: http://easings.net/#easeInQuart\n * n = 5: http://easings.net/#easeInQuint\n */\nfunction poly(n) {\n  'worklet';\n  return (t) => Math.pow(t, n);\n}\n\n/**\n * A sinusoidal function.\n *\n * http://easings.net/#easeInSine\n */\nfunction sin(t) {\n  'worklet';\n  return 1 - Math.cos((t * Math.PI) / 2);\n}\n\n/**\n * A circular function.\n *\n * http://easings.net/#easeInCirc\n */\nfunction circle(t) {\n  'worklet';\n  return 1 - Math.sqrt(1 - t * t);\n}\n\n/**\n * An exponential function.\n *\n * http://easings.net/#easeInExpo\n */\nfunction exp(t) {\n  'worklet';\n  return Math.pow(2, 10 * (t - 1));\n}\n\n/**\n * A simple elastic interaction, similar to a spring oscillating back and\n * forth.\n *\n * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n * times.\n *\n * http://easings.net/#easeInElastic\n */\nfunction elastic(bounciness = 1) {\n  'worklet';\n  const p = bounciness * Math.PI;\n  return (t) => {\n    'worklet';\n    return 1 - Math.pow(Math.cos((t * Math.PI) / 2), 3) * Math.cos(t * p);\n  };\n}\n\n/**\n * Use with `Animated.parallel()` to create a simple effect where the object\n * animates back slightly as the animation starts.\n *\n * Wolfram Plot:\n *\n * - http://tiny.cc/back_default (s = 1.70158, default)\n */\nfunction back(s = 1.70158) {\n  'worklet';\n  return (t) => t * t * ((s + 1) * t - s);\n}\n\n/**\n * Provides a simple bouncing effect.\n *\n * http://easings.net/#easeInBounce\n */\nfunction bounce(t) {\n  'worklet';\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  }\n\n  if (t < 2 / 2.75) {\n    const t2 = t - 1.5 / 2.75;\n    return 7.5625 * t2 * t2 + 0.75;\n  }\n\n  if (t < 2.5 / 2.75) {\n    const t2 = t - 2.25 / 2.75;\n    return 7.5625 * t2 * t2 + 0.9375;\n  }\n\n  const t2 = t - 2.625 / 2.75;\n  return 7.5625 * t2 * t2 + 0.984375;\n}\n\n/**\n * Provides a cubic bezier curve, equivalent to CSS Transitions'\n * `transition-timing-function`.\n *\n * A useful tool to visualize cubic bezier curves can be found at\n * http://cubic-bezier.com/\n */\nfunction bezier(x1, y1, x2, y2) {\n  'worklet';\n  return Bezier(x1, y1, x2, y2);\n}\n\n/**\n * Runs an easing function forwards.\n */\nfunction in_(easing) {\n  'worklet';\n  return easing;\n}\n\n/**\n * Runs an easing function backwards.\n */\nfunction out(easing) {\n  'worklet';\n  return (t) => {\n    'worklet';\n    return 1 - easing(1 - t);\n  };\n}\n\n/**\n * Makes any easing function symmetrical. The easing function will run\n * forwards for half of the duration, then backwards for the rest of the\n * duration.\n */\nfunction inOut(easing) {\n  'worklet';\n  return (t) => {\n    'worklet';\n    if (t < 0.5) {\n      return easing(t * 2) / 2;\n    }\n    return 1 - easing((1 - t) * 2) / 2;\n  };\n}\n\nexport const Easing = {\n  linear,\n  ease,\n  quad,\n  cubic,\n  poly,\n  sin,\n  circle,\n  exp,\n  elastic,\n  back,\n  bounce,\n  bezier,\n  in: in_,\n  out,\n  inOut,\n};\n"]},"metadata":{},"sourceType":"module"}